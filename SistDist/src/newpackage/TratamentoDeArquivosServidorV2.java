/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package newpackage;

import java.io.Serializable;
import java.util.Date;

/**
 * @author JKMüòé·ìö·òè·ó¢ AND BRENOX1000üòÅ
 * Lado Cliente
 */
public class TratamentoDeArquivosServidorV2 implements Serializable {
   
   /**
    * Por Que Serializar?
    * Dessa forma podemos criar uma cadeia de bytes usando
    * a implementa√ß√£o do seri√°vel, al√©m de manter cliente
    * e servidor atualizados em vers√µes iguais e/ou 
    * compat√≠veis.
    */
   private static final long serialVersionUID = 20194060L;
   
   /**
    * Vari√°veis que ir√£o indicar caracter√≠sticas ao arquivo a ser transformado em uma cadeia de bytes[].
    * 
    * OBS_01: Aquela que tiverem transient ao lado n√£o s√£o serializadas, ou seja, n√£o fazem parte da cadeia
    *         de bytes.
    * 
    * OBS_02: Est√° senddo usado o typo byte pois todo e qualquer arquivo √© nada mais que uma cadeia de 
    *         bytes, e como n√£o temos como saber o tipo de arquivo a ser enviado, √© mais f√°cil trans-
    *         form√°-lo em cadeia de bytes e junto ser enviado algumas informa√ß√µes caracter√≠sticas.
    */
   
   private String nomeDoArquivo;
   private byte[] conteudo;
   
   /* Sequ√™ncia de Gets e Sets                                 */
   /* Dessa forma podemos ou capturar ou indicar um novo valor */
   
   /**
    * Captura ou defini√ß√£o de nome
    * @return 
    */
   public String getNome() {
             return nomeDoArquivo;
   }
   public void setNome(String nome) {
             this.nomeDoArquivo = nome;
   }
   
   /**
    * Captura ou defini√ß√£o do conte√∫do 
     * @return 
    */
   public byte[] getConteudo() {
             return conteudo;
   }
   public void setConteudo(byte[] conteudo) {
             this.conteudo = conteudo;
   }
       
}
